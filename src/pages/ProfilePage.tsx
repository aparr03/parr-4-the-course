import { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import { profileService } from '../services/profileService';

const ProfilePage = () => {
  const { user, signOut, username, setUsername } = useAuth();
  const [isLoading, setIsLoading] = useState(false);
  const [profileLoading, setProfileLoading] = useState(true);
  const [avatarUrl, setAvatarUrl] = useState<string | null>(null);
  const [isAutoGeneratedUsername, setIsAutoGeneratedUsername] = useState(false);
  const [isEditingUsername, setIsEditingUsername] = useState(false);
  const [newUsername, setNewUsername] = useState('');
  const [usernameError, setUsernameError] = useState<string | null>(null);

  useEffect(() => {
    // Immediately render the page structure without waiting for profile data
    if (user) {
      loadProfileData();
    } else {
      setProfileLoading(false);
    }
  }, [user]);

  const loadProfileData = async () => {
    if (!user) return;
    
    try {
      const { data, error } = await profileService.getProfileByUserId(user.id);
      
      if (error) {
        console.error('Error loading profile data:', error);
        return;
      }
      
      if (data?.avatar_url) {
        setAvatarUrl(data.avatar_url);
      }
      
      if (data?.username && data.username.startsWith('user_')) {
        setIsAutoGeneratedUsername(true);
      }
    } catch (error) {
      console.error('Error loading profile data:', error);
    } finally {
      setProfileLoading(false);
    }
  };

  const handleSignOut = async () => {
    setIsLoading(true);
    try {
      await signOut();
      // Redirect is handled by the auth context and protected route
    } catch (error) {
      console.error('Error signing out:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleUsernameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setNewUsername(e.target.value);
    setUsernameError(null);
  };
  
  const updateUsername = async () => {
    if (!user) return;
    
    if (!newUsername.trim()) {
      setUsernameError('Username cannot be empty');
      return;
    }
    
    if (!/^[a-zA-Z0-9_]+$/.test(newUsername)) {
      setUsernameError('Username can only contain letters, numbers, and underscores');
      return;
    }
    
    if (newUsername.length < 3 || newUsername.length > 20) {
      setUsernameError('Username must be between 3 and 20 characters');
      return;
    }
    
    try {
      const { available } = await profileService.isUsernameAvailable(newUsername);
      
      if (!available) {
        setUsernameError('Username is already taken');
        return;
      }
      
      const { error } = await profileService.updateProfile(user.id, { username: newUsername });
      
      if (error) throw error;
      
      setUsername(newUsername);
      setIsAutoGeneratedUsername(false);
      setIsEditingUsername(false);
    } catch (error) {
      console.error('Error updating username:', error);
      setUsernameError('Failed to update username. Please try again.');
    }
  };

  // Get first letter of username or email for avatar
  const getInitial = () => {
    if (username) return username[0].toUpperCase();
    if (user?.email) return user.email[0].toUpperCase();
    return '?';
  };

  // Loading indicator for the entire profile
  if (!user) {
    return (
      <div className="max-w-4xl mx-auto p-4">
        <div className="h-64 flex items-center justify-center">
          <div className="text-center">
            <div className="inline-block w-8 h-8 border-4 border-blue-600 border-t-transparent rounded-full animate-spin mb-4"></div>
            <p className="text-gray-600">Loading account information...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-4">
      <div className="mb-10 text-center">
        <h1 className="text-3xl font-bold mb-2 text-blue-600">Your Profile</h1>
        <p className="text-gray-600">Manage your account and recipes</p>
      </div>

      <div className="bg-white shadow-lg rounded-xl p-8 mb-8">
        <div className="flex flex-col md:flex-row items-start gap-8">
          <div className="w-full md:w-1/3 flex flex-col items-center">
            <div className="w-32 h-32 rounded-full overflow-hidden mb-4 border border-gray-200">
              {profileLoading ? (
                <div className="w-full h-full bg-gray-100 flex items-center justify-center">
                  <div className="w-8 h-8 border-4 border-blue-400 border-t-transparent rounded-full animate-spin"></div>
                </div>
              ) : avatarUrl ? (
                <div className="w-full h-full">
                  <img 
                    src={avatarUrl} 
                    alt="Profile" 
                    className="w-full h-full object-cover"
                    onError={(e) => {
                      const img = e.target as HTMLImageElement;
                      console.error('Avatar image error:', { 
                        url: img.src, 
                        error: 'Failed to load image',
                        user: user.id
                      });
                      setAvatarUrl(null);
                    }}
                  />
                </div>
              ) : (
                <div className="w-full h-full bg-blue-100 flex items-center justify-center">
                  <span className="text-4xl text-blue-600">
                    {getInitial()}
                  </span>
                </div>
              )}
            </div>
            
            <Link 
              to="/edit-profile" 
              className="text-sm text-blue-600 hover:text-blue-800 mb-4"
            >
              Change profile picture
            </Link>
            <button
              onClick={handleSignOut}
              disabled={isLoading}
              className={`px-6 py-2 border border-red-500 text-red-500 rounded-lg hover:bg-red-50 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-50 transition ${isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}
            >
              {isLoading ? 'Signing out...' : 'Sign out'}
            </button>
          </div>

          <div className="w-full md:w-2/3">
            <div className="mb-6">
              <h2 className="text-xl font-semibold mb-4 text-gray-800">Account Information</h2>
              <div className="grid grid-cols-1 gap-4">
                <div>
                  <label className="block text-sm font-medium text-gray-500">Username</label>
                  {profileLoading ? (
                    <div className="h-6 bg-gray-200 rounded animate-pulse mt-1 w-40"></div>
                  ) : isEditingUsername ? (
                    <div className="mt-1">
                      <input
                        type="text"
                        value={newUsername}
                        onChange={handleUsernameChange}
                        className="px-3 py-2 border border-gray-300 rounded-md w-full"
                        placeholder="Enter new username"
                      />
                      {usernameError && (
                        <p className="text-red-500 text-sm mt-1">{usernameError}</p>
                      )}
                      <div className="mt-2 space-x-2">
                        <button
                          onClick={updateUsername}
                          className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
                        >
                          Save
                        </button>
                        <button
                          onClick={() => setIsEditingUsername(false)}
                          className="px-3 py-1 bg-gray-200 text-gray-800 rounded-md hover:bg-gray-300"
                        >
                          Cancel
                        </button>
                      </div>
                    </div>
                  ) : (
                    <div className="mt-1 text-gray-900 flex items-center">
                      <span>{username || 'Not set'}</span>
                      {isAutoGeneratedUsername && (
                        <button
                          onClick={() => {
                            setIsEditingUsername(true);
                            setNewUsername('');
                          }}
                          className="ml-2 text-xs bg-yellow-100 text-yellow-800 px-2 py-1 rounded-md hover:bg-yellow-200"
                        >
                          Change auto-generated username
                        </button>
                      )}
                    </div>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Email</label>
                  {profileLoading ? (
                    <div className="h-6 bg-gray-200 rounded animate-pulse mt-1 w-64"></div>
                  ) : (
                    <div className="mt-1 text-gray-900">{user.email}</div>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Account ID</label>
                  {profileLoading ? (
                    <div className="h-6 bg-gray-200 rounded animate-pulse mt-1 w-1/2"></div>
                  ) : (
                    <div className="mt-1 text-gray-900">{user.id}</div>
                  )}
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-500">Email Verified</label>
                  {profileLoading ? (
                    <div className="h-6 bg-gray-200 rounded animate-pulse mt-1 w-24"></div>
                  ) : (
                    <div className="mt-1 text-gray-900">
                      {user.email_confirmed_at ? (
                        <span className="text-green-600 flex items-center">
                          <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd"></path>
                          </svg>
                          Verified
                        </span>
                      ) : (
                        <span className="text-yellow-600 flex items-center">
                          <svg className="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                            <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd"></path>
                          </svg>
                          Not Verified
                        </span>
                      )}
                    </div>
                  )}
                </div>
              </div>
            </div>

            <div>
              <h2 className="text-xl font-semibold mb-4 text-gray-800">Account Actions</h2>
              <div className="space-y-4">
                <Link to="/forgot-password" className="block w-full px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transform transition hover:-translate-y-0.5 text-left flex justify-between items-center">
                  <span>Change Password</span>
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd"></path>
                  </svg>
                </Link>
                <Link to="/edit-profile" className="block w-full px-6 py-3 bg-white border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-opacity-50 transform transition hover:-translate-y-0.5 text-left flex justify-between items-center">
                  <span>Update Profile</span>
                  <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg">
                    <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd"></path>
                  </svg>
                </Link>
              </div>
            </div>
          </div>
        </div>
      </div>

      <div className="bg-white shadow-lg rounded-xl p-8">
        <h2 className="text-xl font-semibold mb-4 text-gray-800">Your Recipes</h2>
        <div className="p-6 text-center text-gray-500">
          <svg className="w-16 h-16 mx-auto mb-4 text-gray-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10"></path>
          </svg>
          <p className="text-xl font-medium mb-2">No recipes yet</p>
          <p className="mb-4">You haven't created any recipes yet. Start adding your favorite recipes!</p>
          <Link to="/add-recipe" className="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-opacity-50 transform transition hover:-translate-y-0.5 inline-block">
            Create Recipe
          </Link>
        </div>
      </div>
    </div>
  );
};

export default ProfilePage; 